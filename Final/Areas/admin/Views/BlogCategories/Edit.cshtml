@model Final.Models.BlogCategory

@{
    ViewBag.Title = "Edit";
    Layout = "~/Areas/admin/Views/Shared/_adminLayout.cshtml";
}
<style>
    h6 {
        margin-left: 10px
    }
</style>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Chỉnh sửa danh mục</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.id)

    <div class="form-group">
        <h6>Tiêu đề</h6>
        <div class="col-md-10">
            @Html.EditorFor(model => model.title, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.title, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        <h6>Meta</h6>
        <div class="col-md-10">
            @Html.EditorFor(model => model.meta, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.meta, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        <h6>Mô tả</h6>
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.description)
            @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })

        </div>

    </div>


    <div class="form-group">
        <h6>Liên kết ngoài</h6>
        <div class="col-md-10">
            @Html.EditorFor(model => model.link, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.link, "", new { @class = "text-danger" })
        </div>
    </div>



    <div class="form-group">
        <h6>Vị trí hiển thị</h6>
        <div class="col-md-10">
            @Html.EditorFor(model => model.displayOrder, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.displayOrder, "", new { @class = "text-danger" })
        </div>
    </div>



    <div class="form-group">
        <h6>Hiển thị</h6>
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.hide, new List<SelectListItem>
            {
                new SelectListItem { Text = "Hiển thị", Value = "true" },
                new SelectListItem { Text = "Ẩn", Value = "false" }
            }, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.hide, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <h6>Ngày bắt đầu</h6>
        <div class="col-md-10">
            <p>@Model.dateBegin</p>
            @Html.HiddenFor(model => model.dateBegin)
        </div>
    </div>


    <div class="form-group">
        <h6>Tạo bởi</h6>
        <div class="col-md-10">
            @Html.EditorFor(model => model.createBy, new { htmlAttributes = new { @class = "form-control", value = Model.createBy } })
            @Html.ValidationMessageFor(model => model.createBy, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <h6>Ngày cập nhật</h6>
        <div class="col-md-10">
            @Html.EditorFor(model => model.dateModife, new { htmlAttributes = new { @class = "form-control", type = "date", Value = DateTime.Now.ToString("yyyy-MM-dd") } })
            @Html.ValidationMessageFor(model => model.dateModife, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <h6>Cập nhật bởi</h6>
        <div class="col-md-10">
            @Html.EditorFor(model => model.modifedBy, new { htmlAttributes = new { @class = "form-control", value = Model.modifedBy } })
            @Html.ValidationMessageFor(model => model.modifedBy, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" style="display:flex">
        <div class="col-md-offset-2 col-md-10">
            <a href="@Url.Action("Index")" class="btn btn-info">Trở về</a>
        </div>
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Lưu" class="btn btn-success" />
        </div>

    </div>
</div>
}




@section ClientScript{

    <!-- Bootstrap core JavaScript-->
    <script src="~/Assets/admin/vendor/jquery/jquery.min.js"></script>
    <script src="~/Assets/admin/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>

    <!-- Core plugin JavaScript-->
    <script src="~/Assets/admin/vendor/jquery-easing/jquery.easing.min.js"></script>

    <!-- Custom scripts for all pages-->
    <script src="~/Assets/admin/js/sb-admin-2.min.js"></script>

    <!-- Page level plugins -->
    <script src="~/Assets/admin/vendor/chart.js/Chart.min.js"></script>
    <script src="~/Assets/admin/js/plugin/ckeditor/ckeditor.js"></script>
    <script src="~/Assets/admin/js/plugin/ckfinder/ckfinder.js"></script>

    <script type="text/javascript">
        var editor1 = CKEDITOR.replace("description")
        var editor1 = CKEDITOR.replace("description", { height: '600px' })
        customConfig: '~/Assets/admin/js/plugin/ckeditor/config.js'
    </script>
    <script>
        $(function () {
            $("#title").keyup(function () {
                var str = $.trim($(this).val().toLowerCase());
                str = str
                    .normalize('NFD') // chuyển chuỗi sang unicode tổ hợp
                    .replace(/[\u0300-\u036f]/g, ''); // xóa các ký tự dấu sau khi tách tổ hợp

                // Thay ký tự đĐ
                str = str.replace(/[đĐ]/g, 'd');

                // Xóa ký tự đặc biệt
                str = str.replace(/([^0-9a-z-\s])/g, '');

                // Xóa khoảng trắng thay bằng ký tự _
                str = str.replace(/(\s+)/g, '_');

                // Xóa ký tự - liên tiếp
                str = str.replace(/-+/g, '_');

                // xóa phần dư - ở đầu & cuối
                str = str.replace(/^-+|-+$/g, '');
                $("#meta").val("_"+str)
            }).keyup();
        });



    </script>
}

